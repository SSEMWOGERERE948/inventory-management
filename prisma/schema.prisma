generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String         @default("USER")
  isActive      Boolean        @default(true)
  companyId     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  expenses      Expense[]
  orderRequests OrderRequest[]
  payments      Payment[]
  products      Product[]
  sessions      Session[]
  company       Company?       @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String         @unique
  phone         String?
  address       String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  expenses      Expense[]
  orderRequests OrderRequest[]
  payments      Payment[]
  products      Product[]
  users         User[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String             @id @default(cuid())
  name        String
  description String?
  sku         String             @unique
  price       Decimal            @db.Decimal(10, 2)
  quantity    Int                @default(0)
  minStock    Int                @default(0)
  maxStock    Int?
  isActive    Boolean            @default(true)
  companyId   String
  categoryId  String?
  createdById String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  orderItems  OrderRequestItem[]
  category    Category?          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company     Company            @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy   User               @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OrderRequest {
  id          String             @id @default(cuid())
  status      String             @default("PENDING")
  totalAmount Decimal            @db.Decimal(10, 2)
  notes       String?
  companyId   String
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  approvedAt  DateTime?
  rejectedAt  DateTime?
  fulfilledAt DateTime?
  shippedAt   DateTime?
  company     Company            @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items       OrderRequestItem[]
}

model OrderRequestItem {
  id             String       @id @default(cuid())
  quantity       Int
  unitPrice      Decimal      @db.Decimal(10, 2)
  totalPrice     Decimal      @db.Decimal(10, 2)
  orderRequestId String
  productId      String
  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([orderRequestId, productId])
}

model Payment {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String
  receiptUrl  String?
  paymentDate DateTime
  userId      String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Expense {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String
  category    String?
  receiptUrl  String?
  expenseDate DateTime
  userId      String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
