generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               String              @default("USER")
  isActive           Boolean             @default(true)
  companyId          String?
  creditLimit        Decimal             @default(0) @db.Decimal(10, 2)
  creditUsed         Decimal             @default(0) @db.Decimal(10, 2)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  accounts           Account[]
  expenses           Expense[]
  orderRequests      OrderRequest[]
  payments           Payment[]
  products           Product[]
  sessions           Session[]
  creditTransactions CreditTransaction[]
  customers          Customer[]
  customerPayments   CustomerPayment[]
  restockRecords     RestockRecord[]
  userInventory      UserInventory[]
  stockMovements     StockMovement[]     // New relation for stock movements
  company            Company?            @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                 String              @id @default(cuid())
  name               String              @unique
  email              String              @unique
  phone              String?
  address            String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  expenses           Expense[]
  orderRequests      OrderRequest[]
  payments           Payment[]
  products           Product[]
  users              User[]
  creditTransactions CreditTransaction[]
  stockAlerts        StockAlert[]
  customers          Customer[]
  restockRecords     RestockRecord[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                String             @id @default(cuid())
  name              String
  description       String?
  sku               String             @unique
  price             Decimal            @db.Decimal(10, 2)
  
  // Enhanced Stock Management Fields
  quantity          Int                @default(0)        // Legacy field - kept for compatibility
  stockQuantity     Int                @default(0)        // Current actual stock quantity
  minStock          Int                @default(10)       // Legacy field - kept for compatibility  
  minStockLevel     Int                @default(10)       // Minimum stock threshold for alerts
  maxStock          Int?                                  // Legacy field - kept for compatibility
  maxStockLevel     Int?               @default(1000)     // Maximum stock capacity
  reorderPoint      Int?               @default(20)       // Automatic reorder trigger point
  reorderQuantity   Int?               @default(100)      // Suggested reorder quantity
  lastStockUpdate   DateTime?                             // When stock was last modified
  stockStatus       String             @default("IN_STOCK") // IN_STOCK, LOW_STOCK, OUT_OF_STOCK, DISCONTINUED
  
  // Product Management
  isActive          Boolean            @default(true)
  companyId         String
  categoryId        String?
  createdById       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  orderItems        OrderRequestItem[]
  stockAlerts       StockAlert[]
  stockMovements    StockMovement[]    // New relation for tracking stock changes
  customerOrders    CustomerOrder[]
  restockRecords    RestockRecord[]
  userInventory     UserInventory[]
  category          Category?          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company           Company            @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy         User               @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OrderRequest {
  id          String             @id @default(cuid())
  status      String             @default("PENDING")
  totalAmount Decimal            @db.Decimal(10, 2)
  notes       String?
  companyId   String
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  approvedAt  DateTime?
  rejectedAt  DateTime?
  fulfilledAt DateTime?
  shippedAt   DateTime?

  company     Company            @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items       OrderRequestItem[]
}

model OrderRequestItem {
  id             String       @id @default(cuid())
  quantity       Int
  unitPrice      Decimal      @db.Decimal(10, 2)
  totalPrice     Decimal      @db.Decimal(10, 2)
  orderRequestId String
  productId      String

  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([orderRequestId, productId])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(10, 2)
  description   String
  receiptUrl    String?
  paymentDate   DateTime
  userId        String
  companyId     String
  isFromCredit  Boolean  @default(false)
  creditAmount  Decimal  @default(0) @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  company       Company  @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Expense {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String
  category    String?
  receiptUrl  String?
  expenseDate DateTime
  userId      String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  type        String   // GRANTED, USED, PAYMENT
  amount      Decimal  @db.Decimal(10, 2)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// Enhanced Stock Alert Model
model StockAlert {
  id             String   @id @default(cuid())
  productId      String
  companyId      String
  alertType      String   // LOW_STOCK, OUT_OF_STOCK, CRITICAL, REORDER_POINT
  message        String?  // Custom alert message
  currentStock   Int      // Stock level when alert was created
  thresholdValue Int      // The threshold that triggered this alert
  isResolved     Boolean  @default(false)
  resolvedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([productId, isResolved])
  @@index([companyId, isResolved])
}

// New Stock Movement Tracking Model
model StockMovement {
  id            String   @id @default(cuid())
  productId     String
  movementType  String   // IN, OUT, ADJUSTMENT, TRANSFER, DAMAGED, EXPIRED
  quantity      Int      // Quantity moved (always positive)
  previousStock Int      // Stock level before this movement
  newStock      Int      // Stock level after this movement
  referenceType String?  // ORDER, MANUAL, RESTOCK, ADJUSTMENT, TRANSFER, DAMAGE, EXPIRY
  referenceId   String?  // ID of related order, restock, etc.
  notes         String?  // Additional notes about the movement
  createdBy     String?  // User who made the change
  createdAt     DateTime @default(now())

  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([productId, createdAt])
  @@index([referenceType, referenceId])
}

model Customer {
  id                 String            @id @default(cuid())
  name               String
  phone              String?
  email              String?
  address            String?
  totalCredit        Decimal           @default(0) @db.Decimal(10, 2)
  totalPaid          Decimal           @default(0) @db.Decimal(10, 2)
  outstandingBalance Decimal           @default(0) @db.Decimal(10, 2)
  userId             String
  companyId          String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  company            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders             CustomerOrder[]
  payments           CustomerPayment[]
}

model CustomerOrder {
  id              String   @id @default(cuid())
  customerId      String
  productId       String
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalAmount     Decimal  @db.Decimal(10, 2)
  isPaid          Boolean  @default(false)
  paidAmount      Decimal  @default(0) @db.Decimal(10, 2)
  remainingAmount Decimal  @default(0) @db.Decimal(10, 2)
  orderDate       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CustomerPayment {
  id          String   @id @default(cuid())
  customerId  String
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  paymentDate DateTime
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RestockRecord {
  id          String   @id @default(cuid())
  productId   String
  companyId   String
  userId      String
  quantity    Int
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserInventory {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  quantityReceived  Int      // Total quantity received from approved orders
  quantityUsed      Int      @default(0) // Quantity given as credit to customers
  quantityAvailable Int      // Available quantity (received - used)
  lastUpdated       DateTime @default(now()) @updatedAt
  createdAt         DateTime @default(now())

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}
