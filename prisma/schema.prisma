generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  companyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  company       Company?       @relation(fields: [companyId], references: [id])
  orders        OrderRequest[]
  payments      Payment[]
  expenses      Expense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users        User[]
  products     Product[]
  categories   Category[]
  orders       OrderRequest[]
  payments     Payment[]
  expenses     Expense[]
  stockAlerts  StockAlert[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products Product[]
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  sku               String   @unique
  price             Decimal  @db.Decimal(10, 2)
  quantity          Int      @default(0)
  minStockLevel     Int      @default(10)
  maxStockLevel     Int      @default(100)
  reorderPoint      Int      @default(20)
  categoryId        String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category    Category?     @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  stockAlerts StockAlert[]
}

model OrderRequest {
  id           String    @id @default(cuid())
  userId       String
  companyId    String
  status       String    @default("PENDING")
  totalAmount  Decimal?  @db.Decimal(10, 2)
  notes        String?
  approvedAt   DateTime?
  rejectedAt   DateTime?
  fulfilledAt  DateTime?
  shippedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items   OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  order   OrderRequest @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  amount      Decimal  @db.Decimal(10, 2)
  description String
  receiptUrl  String?
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  amount      Decimal  @db.Decimal(10, 2)
  description String
  category    String?
  receiptUrl  String?
  expenseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model StockAlert {
  id          String   @id @default(cuid())
  productId   String
  companyId   String
  type        String
  message     String
  threshold   Int?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
