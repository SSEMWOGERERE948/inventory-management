generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   OrderRequest[]
  payments Payment[]
  expenses Expense[]

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users        User[]
  products     Product[]
  categories   Category[]
  orders       OrderRequest[]
  stockAlerts  StockAlert[]

  @@map("companies")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  sku               String   @unique
  price             Decimal  @db.Decimal(10, 2)
  quantity          Int      @default(0)
  lowStockThreshold Int      @default(10)
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  companyId         String
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  orderItems   OrderItem[]
  stockAlerts  StockAlert[]

  @@map("products")
}

model OrderRequest {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status      OrderStatus @default(PENDING)
  totalAmount Decimal?    @db.Decimal(10, 2)
  notes       String?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  fulfilledAt DateTime?
  shippedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  items OrderItem[]

  @@map("order_requests")
}

model OrderItem {
  id         String       @id @default(cuid())
  orderId    String
  order      OrderRequest @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product      @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Decimal      @db.Decimal(10, 2)
  totalPrice Decimal      @db.Decimal(10, 2)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("order_items")
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  description String
  receiptUrl  String?
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payments")
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  description String
  category    String?
  receiptUrl  String?
  expenseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

model StockAlert {
  id        String           @id @default(cuid())
  productId String
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  companyId String
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type      StockAlertType   @default(LOW_STOCK)
  status    StockAlertStatus @default(ACTIVE)
  threshold Int
  message   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("stock_alerts")
}

enum Role {
  USER
  COMPANY_DIRECTOR
  ADMIN
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  FULFILLED
  SHIPPED
  CANCELLED
}

enum StockAlertType {
  LOW_STOCK
  OUT_OF_STOCK
  REORDER_POINT
}

enum StockAlertStatus {
  ACTIVE
  RESOLVED
  DISMISSED
}
